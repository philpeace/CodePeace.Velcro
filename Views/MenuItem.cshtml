@{
    // odd formatting in this file is to cause more attractive results in the output.
    var items = (IEnumerable<dynamic>)Enumerable.Cast<dynamic>(Model);
}
@{
    if (!HasText(Model.Text))
    {
        @DisplayChildren(Model)
    }
    else
    {
        string requestUrl = Request.Path.TrimEnd('/');
        string modelUrl = Model.Href.TrimEnd('/');
       
        string appPath = Request.ApplicationPath ?? string.Empty;

        if (appPath != "/")
        {
            requestUrl = requestUrl.Substring(appPath.Length);
            modelUrl = modelUrl.Substring(appPath.Length);
        }
        requestUrl = requestUrl.ToUpperInvariant();
        modelUrl = modelUrl.ToUpperInvariant();
    
        if (requestUrl == modelUrl || (!string.IsNullOrEmpty(modelUrl) && requestUrl.StartsWith(modelUrl + "/"))) { 
	        Model.Classes.Add("active");
        }
    
        if(items.Any()) {
            Model.Classes.Add("dropdown");
        }
    
        var tag = Tag(Model, "li");
        @tag.StartElement
            
        @* morphing the shape to keep Model untouched*@
        Model.Metadata.Alternates.Clear(); 
        Model.Metadata.Type = "MenuItemLink";
        @Display(Model)
    
        if (items.Any()) {
            <ul class="dropdown-menu">
            @DisplayChildren(Model)
            </ul>
        }
        @tag.EndElement
    }
}